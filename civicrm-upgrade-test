#!/bin/bash

## Determine the absolute path to a directory or file
function abspath {
    if [[ -d "$1" ]]
    then
        pushd "$1" >/dev/null
        pwd
        popd >/dev/null
    elif [[ -e $1 ]]
    then
        pushd "$(dirname "$1")" >/dev/null
        echo "$(pwd)/$(basename "$1")"
        popd >/dev/null
    else
        echo "$1" does not exist! >&2
        return 127
    fi
}

function showHelp {
      echo "usage: $0 [--out /path/to/output/dir] [--web /path/to/web/root] [--db mysql_database_name] [--junit-xml /path/to/junit.xml] <file1.sql.bz2> <file2.sql.bz2> ..."
}

## Drop all tables, views, etc
function drop_civicrm_sql {
  DBNAME="$1"
  MYSQLCMD="mysql $DBNAME"

  echo; echo "Dropping civicrm_* views from database $DBNAME"
  echo "SELECT table_name FROM information_schema.TABLES  WHERE TABLE_SCHEMA='${DBNAME}' AND TABLE_TYPE = 'VIEW'" \
    | $MYSQLCMD \
    | grep '^\(civicrm_\|log_civicrm_\)' \
    | awk -v NOFOREIGNCHECK='SET FOREIGN_KEY_CHECKS=0;' 'BEGIN {print NOFOREIGNCHECK}{print "drop view " $1 ";"}' \
    | $MYSQLCMD

  echo; echo "Dropping civicrm_* tables from database $DBNAME"
  echo "SELECT table_name FROM information_schema.TABLES  WHERE TABLE_SCHEMA='${DBNAME}' AND TABLE_TYPE = 'BASE TABLE'" \
    | $MYSQLCMD \
    | grep '^\(civicrm_\|log_civicrm_\)' \
    | awk -v NOFOREIGNCHECK='SET FOREIGN_KEY_CHECKS=0;' 'BEGIN {print NOFOREIGNCHECK}{print "drop table " $1 ";"}' \
    | $MYSQLCMD
  ## This should also kill associated triggers

  echo; echo "Dropping civicrm_* functions from database $DBNAME"
  echo "SELECT SPECIFIC_NAME FROM information_schema.ROUTINES WHERE ROUTINE_SCHEMA = '${DBNAME}' AND ROUTINE_TYPE = 'FUNCTION';" \
    | $MYSQLCMD \
    | grep '^\(civicrm_\|log_civicrm_\)' \
    | awk -v NOFOREIGNCHECK='SET FOREIGN_KEY_CHECKS=0;' 'BEGIN {print NOFOREIGNCHECK}{print "drop function " $1 ";"}' \
    | $MYSQLCMD
}

#####################################################################
## Load options

SCRIPT_PATH=$(abspath "$0")
SCRIPT_DIR=$(dirname "$SCRIPT_PATH")
if [ -f "$SCRIPT_DIR/civicrm-upgrade-test.settings" ]; then
  source "$SCRIPT_DIR/civicrm-upgrade-test.settings"
else
  echo "Warning: Could not find $SCRIPT_DIR/civicrm-upgrade-test.settings"
fi

DATABASE_FILES=""
while [ -n "$1" ]; do
  case "$1" in
    --web)
      WEB_ROOT="$2"
      shift 2
      ;;
    --out)
      OUTPUT_DIR="$2"
      shift 2
      ;;
    --db)
      TEST_DATABASE="$2"
      shift 2
      ;;
    --junit-xml)
      JUNIT_XML="$2"
      shift 2
      ;;
    --help)
      showHelp
      exit 1
      ;;
    *)
      DATABASE_FILES="$DATABASE_FILES $1"
      shift
      ;;
  esac
done

#####################################################################
## Validate options
echo "Web Dir: [$WEB_ROOT]"
echo "Output Dir: [$OUTPUT_DIR]"
echo "Database Name: [$TEST_DATABASE]"

if [ ! -d "$WEB_ROOT" ]; then
  echo "Missing or invalid web dir"
  exit 2
fi
if [ ! -d "$OUTPUT_DIR" ]; then
  #echo "Missing or invalid output dir"
  #exit 2
  if [ -z "$OUTPUT_DIR" ]; then
    echo "Missing output dir"
    exit
  elif mkdir -p "$OUTPUT_DIR" ; then
    echo "Created output dir"
  else
    echo "Failed to make output dir"
    exit
  fi
fi
if [ -z "$TEST_DATABASE" ]; then
  echo "Missing or invalid database name"
  exit 2
fi
if [ -z "$DATABASE_FILES" ]; then
  echo "Missing list of database backup files (*.sql.bz2)"
  showHelp
  exit 2
fi

#####################################################################
## Run upgrades
if [ -n "$DRUPAL_SITE" ]; then
  DRUSH="drush -l $DRUPAL_SITE"
else
  DRUSH="drush"
fi

for SQLBZ2 in $DATABASE_FILES ; do
  NAME=$(basename $SQLBZ2)
  OUTPUT="${OUTPUT_DIR}/${NAME}.out"

  echo ""
  echo "------------------------------------------------------"
  echo "Input [$SQLBZ2]"
  echo "Output [$OUTPUT]"

  drop_civicrm_sql $TEST_DATABASE
  bzcat "$SQLBZ2" | mysql "$TEST_DATABASE"
  pushd "$WEB_ROOT" > /dev/null
  $DRUSH civicrm-upgrade-db > "$OUTPUT" 2>&1
  popd > /dev/null
  echo
done

#####################################################################
## Summary (Console)

echo "------------------------------------------------------"
echo "Summary"
for SQLBZ2 in $DATABASE_FILES ; do
  NAME=$(basename $SQLBZ2)
  OUTPUT="${OUTPUT_DIR}/${NAME}.out"
  ## Note: Similar lines of code for "Summary (Console)" and "Summary (JUnit)"
  if head -n1 "$OUTPUT" | grep '^Upgrade output' > /dev/null ; then
    echo "$NAME	OK"
  else
    echo "$NAME	ERROR"
  fi
done

#####################################################################
## Summary (JUnit)

if [ -n "$JUNIT_XML" ]; then
  echo "------------------------------------------------------"
  echo "Generate JUnit XML"
  COUNT=$(echo "$DATABASE_FILES" | wc -w)
  echo > "$JUNIT_XML"
  echo "<testsuite tests=\"$COUNT\">" >> "$JUNIT_XML"

  for SQLBZ2 in $DATABASE_FILES ; do
    NAME=$(basename $SQLBZ2)
    OUTPUT="${OUTPUT_DIR}/${NAME}.out"
    ## Note: Similar lines of code for "Summary (Console)" and "Summary (JUnit)"
    if head -n1 "$OUTPUT" | grep '^Upgrade output' > /dev/null ; then
      echo "<testcase class=\"civicrm-upgrade-test\" name=\"$SQLBZ2\" />" >> "$JUNIT_XML"
    else
      echo "<testcase class=\"civicrm-upgrade-test\" name=\"$SQLBZ2\">" >> "$JUNIT_XML"
      echo "  <failure type=\"UnexpectedOutput\">" >> "$JUNIT_XML"
      php -r 'echo htmlspecialchars(file_get_contents("php://stdin"));' < $OUTPUT >> "$JUNIT_XML"
      echo "  </failure>" >> "$JUNIT_XML"
      echo "</testcase>" >> "$JUNIT_XML"
    fi
  done

  echo "</testsuite>" >> "$JUNIT_XML"
fi
